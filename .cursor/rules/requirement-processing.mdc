---
description: Customer requirement processing with multi-engine architecture and intelligent clarification
globs: ["**/*"]
alwaysApply: true
priority: 75
---

# Customer Requirement Processing

## Linear-First Processing Strategy

**Core Principle**: Process all customer documents using two-phase approach and dump everything into Linear as the single source of truth.

**Two-Phase Processing for Context Window Efficiency:**

**Phase 1: Rapid Requirements Capture**
- Scan `.cursor/requirements/` folder for ALL customer documents
- Preserve raw customer context verbatim
- Apply confidence scoring (0.4-0.6 threshold) for processing priority
- **CRITICAL**: Process ALL requirements regardless of confidence score
- Route uncertain requirements (<0.6 confidence) to human review BUT STILL CREATE TICKETS
- Process clear items autonomously
- **NO REQUIREMENTS LEFT BEHIND**: Every identifiable requirement must become a ticket

**Phase 2: Deep Analysis and Linear Dump**
- Leverage full context windows for detailed user story generation
- Generate acceptance criteria with MVP focus
- Identify technical dependencies and blockers
- Create implementation task breakdown
- **DUPLICATE DETECTION**: Check existing Linear tickets for similar requirements
- **CONSOLIDATION**: Add differing requirements to existing tickets as comments
- **COMPREHENSIVE DUMP**: Create tickets for EVERY new requirement only
- **MULTIPLE REQUIREMENTS PER DOCUMENT**: Extract all requirements from each document
- **VERBATIM PRESERVATION**: Store original customer language in ticket descriptions
- **COMPLETE COVERAGE**: Ensure no requirement is missed or filtered out
- **FILE CLEANUP**: Delete processed files from `.cursor/requirements/` folder after successful Linear dump
- **VALIDATION**: Verify all requirements extracted before file deletion

**Processing Workflow:**
1. **Phase 1**: Scan requirements folder and apply confidence scoring
2. **Phase 2**: Deep analysis and dump everything into Linear
3. **Validation**: Check completeness, assess feasibility, organize strategic roadmap

## Document Processing Commands

**Primary Commands:**
- `process requirements` - Scan requirements folder and dump everything into Linear
- `validate requirements` - Check completeness, assess feasibility, organize strategic roadmap

**Linear Integration:**
- All project data stored in Linear
- Customer requirements verbatim in ticket descriptions
- Clarifications added as ticket comments
- Strategic roadmap with priorities and labels
- Project milestones and progress tracking

## Comprehensive Requirement Extraction

**CRITICAL RULES FOR COMPLETE COVERAGE:**

**1. Multiple Requirements Per Document**
- Each document may contain multiple requirements
- Extract EVERY identifiable requirement as a separate ticket
- Don't combine requirements into single tickets
- Create tickets for both major and minor requirements

**2. Requirement Identification**
- Look for explicit requirements (must, should, need to)
- Extract implicit requirements from context
- Include functional and non-functional requirements
- Capture business rules and constraints
- Extract user stories and use cases

**3. Confidence Scoring Usage**
- High confidence (>0.6): Process autonomously with full analysis
- Low confidence (<0.6): Create ticket with "NEEDS REVIEW" label
- **NEVER SKIP**: All requirements become tickets regardless of confidence
- Use confidence for processing priority, not filtering

**4. Document Processing**
- Process ALL files in `.cursor/requirements/` folder
- Extract requirements from headers, body, lists, tables
- Capture requirements from images/figures when possible
- Include requirements from appendices and footnotes
- Process both structured and unstructured content

**5. Ticket Creation Standards**
- One requirement per ticket
- Preserve original customer language verbatim
- Include source document reference
- Add confidence score as ticket property
- Include clarification questions in ticket comments

**6. File Cleanup Protocol**
- **PROCESS FIRST**: Extract all requirements and create tickets
- **VALIDATE**: Verify all requirements successfully created in Linear
- **CLEANUP**: Delete processed file from `.cursor/requirements/` folder
- **TRACKING**: Log processed files to prevent reprocessing
- **SAFETY**: Only delete after successful Linear ticket creation
- **BACKUP**: Consider moving to `.cursor/requirements/processed/` instead of deletion

**7. Duplicate Detection and Consolidation**
- **SIMILARITY CHECK**: Compare new requirements with existing Linear tickets
- **SIMILARITY THRESHOLD**: Use 0.8+ similarity score for duplicate detection
- **CONSOLIDATION**: Add differing requirements to existing tickets as comments
- **NO DUPLICATES**: Prevent creation of duplicate tickets
- **ENHANCEMENT**: Update existing tickets with additional information
- **SOURCE TRACKING**: Include source document reference in comments

**Extraction Schema:**
```json
{
  "document_type": "requirements",
  "priority_level": "high/medium/low",
  "features_requested": [{
    "feature_name": "User Authentication",
    "description": "Users need to log in securely",
    "acceptance_criteria": ["Login form validation", "Password security"],
    "mvp_classification": "core",
    "complexity_score": 7,
    "estimated_effort": "6-8 hours"
  }],
  "clarification_needed": [
    "What authentication methods are preferred?",
    "Are there specific security compliance requirements?"
  ],
  "technical_constraints": [
    "Must integrate with existing user database",
    "Requires SSL certificate implementation"
  ],
  "dependencies": [
    "Database schema updates",
    "Frontend form components"
  ]
}
```

## Intelligent Clarification Generation

**Clarification Analysis:**
- Analyze extracted requirements against project templates
- Identify missing information by impact on development timeline
- Prioritize questions for efficient customer communication
- Group related clarifications for batch processing

**Question Prioritization:**
- **High Priority**: Blocks MVP development
- **Medium Priority**: Affects implementation approach
- **Low Priority**: Nice-to-have clarifications

**Clarification Templates:**
```
🔍 **High Priority Clarifications** (Blocks MVP):
1. Authentication method preference (OAuth, email/password, SSO)
2. User role definitions and permissions
3. Data storage requirements and compliance

📋 **Medium Priority Clarifications** (Affects Implementation):
1. UI/UX preferences and design requirements
2. Integration with existing systems
3. Performance and scalability requirements

💡 **Low Priority Clarifications** (Enhancement):
1. Advanced features and future roadmap
2. Branding and customization options
3. Analytics and reporting requirements
```

## Non-Technical to Technical Translation

**Business Language Conversion:**
- Convert business language into user stories
- Generate technical acceptance criteria
- Provide implementation guidance and dependency mapping
- Identify technical constraints and required integrations

**User Story Generation:**
```
**As a** [user type]
**I want** [functionality]
**So that** [business value]

**Acceptance Criteria:**
- [ ] Technical requirement 1
- [ ] Technical requirement 2
- [ ] Technical requirement 3

**Technical Implementation:**
- Database changes required
- API endpoints to create
- Frontend components needed
- Testing requirements

**Dependencies:**
- Related features
- External integrations
- Infrastructure requirements
```

## MVP Classification System

**Dynamic MVP Classification:**
- Parse customer documents using multi-engine processing
- Combine AI models for natural language understanding
- Use specialized OCR engines for structured documents
- Automatically classify features as core MVP vs. nice-to-have
- Apply RICE method with automated complexity scoring

**RICE Method Implementation:**
- **Reach**: Number of users affected
- **Impact**: Business value per user
- **Confidence**: Certainty of estimates
- **Effort**: Development time required

**MVP Classification Rules:**
- **Core MVP**: Essential for basic functionality
- **Nice-to-Have**: Enhancement features
- **Future**: Post-MVP roadmap items
- **Critical Path**: Blocking dependencies

## Requirement Validation

**Completeness Check:**
- Verify all necessary information provided
- Identify missing technical details
- Check for conflicting requirements
- Validate against project constraints

**Feasibility Assessment:**
- Technical complexity evaluation
- Resource requirement estimation
- Timeline impact analysis
- Risk assessment and mitigation

**Quality Validation:**
- Requirement clarity and specificity
- Testability and measurability
- Alignment with project goals
- User value proposition

## Document Processing Workflow

**Phase 1: Rapid Requirements Capture**
- Scan `.cursor/requirements/` folder for ALL customer documents
- Accept documents in multiple formats (PDF, DOCX, MD, TXT)
- Validate document integrity
- Extract metadata and context
- Apply confidence scoring (0.4-0.6 threshold)
- **CRITICAL**: Process ALL requirements regardless of confidence score
- Route uncertain requirements (<0.6 confidence) to human review BUT STILL CREATE TICKETS
- Process clear items autonomously
- **NO REQUIREMENTS LEFT BEHIND**: Every identifiable requirement must become a ticket

**Phase 2: Deep Analysis and Linear Dump**
- Leverage full context windows for detailed analysis
- Generate user stories and acceptance criteria
- Identify technical dependencies and blockers
- Create implementation task breakdown
- **DUPLICATE DETECTION**: Check existing Linear tickets for similar requirements
- **SIMILARITY SCORING**: Use 0.8+ threshold for duplicate detection
- **CONSOLIDATION**: Add differing requirements to existing tickets as comments
- **NEW TICKETS ONLY**: Create tickets for completely new requirements
- **COMPREHENSIVE DUMP**: Create tickets for EVERY new requirement only
- **MULTIPLE REQUIREMENTS PER DOCUMENT**: Extract all requirements from each document
- **VERBATIM PRESERVATION**: Store original customer language in ticket descriptions
- **COMPLETE COVERAGE**: Ensure no requirement is missed or filtered out
- **FILE CLEANUP**: Delete processed files from `.cursor/requirements/` folder after successful Linear dump
- **VALIDATION**: Verify all requirements extracted before file deletion
- Dump everything into Linear:
  - Project description and milestones
  - Resources and team information
  - Raw customer requirements as tickets (verbatim)
  - Initial AI analysis and clarifications
  - Strategic roadmap with priorities and labels

**Phase 3: Strategic Roadmap Organization**
- Analyze all tickets for completeness and feasibility
- Organize tickets into strategic roadmap
- Apply proper priorities and labels
- Create dependencies and relationships
- Set up milestone tracking
- **VALIDATION**: Verify all requirements from all documents are captured

## Integration with Development Pipeline

**Linear Integration:**
- Create tickets for each identified feature
- Set appropriate priorities and labels
- Link related requirements and dependencies
- Track progress and completion

**Project Management:**
- Update project scope and timeline
- Adjust resource allocation
- Monitor MVP progress
- Track quality metrics

**Quality Assurance:**
- Validate requirements against implementation
- Ensure test coverage for all features
- Monitor quality gates and standards
- Track user satisfaction and feedback

## Error Handling

**Document Processing Errors:**
- Invalid or corrupted documents
- Unsupported file formats
- Extraction failures
- Parsing errors

**Recovery Strategies:**
- Fallback to manual processing
- Request document clarification
- Use alternative extraction methods
- Escalate to human review

**Quality Assurance:**
- Validate extracted information
- Cross-reference with original documents
- Verify technical accuracy
- Ensure completeness

## Learning and Improvement

**Pattern Recognition:**
- Learn from successful extractions
- Identify common requirement patterns
- Improve classification accuracy
- Enhance clarification generation

**Continuous Improvement:**
- Update extraction algorithms
- Refine classification rules
- Improve question generation
- Enhance translation quality

## Commands

**Note**: All commands are defined in `.cursor/commands/` folder. This rule focuses on the processing logic and workflows.

Remember: **Always preserve original customer context while providing clear technical translation. Focus on MVP classification and ensure all requirements are testable and measurable.**