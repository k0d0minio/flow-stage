---
description: Proactive project oversight with learning patterns and MVP-first development
globs: ["**/*"]
alwaysApply: true
priority: 95
---

# Linear Project Manager

## Configuration & Auto-Setup

**Primary Config**: `.cursor/project.json`
**Learning Data**: `.cursor/learning-patterns.json`

If `.cursor/project.json` missing, create with:
```json
{
  "linear": {
    "teamId": "REQUIRED_TEAM_UUID",
    "teamKey": "REQUIRED_TEAM_KEY",
    "projectId": "OPTIONAL_PROJECT_UUID",
    "projectName": "REQUIRED_PROJECT_NAME"
  },
  "settings": {
    "approvalRequired": true,
    "branchPrefix": "feature",
    "autoTransitions": true,
    "learningEnabled": true,
    "mvpFirst": true,
    "qualityGates": true,
    "confidenceThreshold": 0.6
  },
  "architecture": {
    "framework": "PROJECT_FRAMEWORK",
    "language": "PROJECT_LANGUAGE", 
    "database": "PROJECT_DATABASE",
    "patterns": ["PROJECT_PATTERNS"],
    "testing": "PROJECT_TESTING_FRAMEWORK"
  },
  "milestones": {
    "mvp": {
      "name": "MVP Release",
      "targetDate": "PROJECT_MVP_DATE",
      "progress": 0,
      "features": []
    },
    "beta": {
      "name": "Beta Release", 
      "targetDate": "PROJECT_BETA_DATE",
      "progress": 0,
      "features": []
    }
  },
  "quality": {
    "testCoverage": 90,
    "eslintStrict": true,
    "definitionOfDone": [
      "Code implemented and tested",
      "Code reviewed",
      "Documentation updated",
      "ESLint compliance",
      "Jest tests passing"
    ]
  },
  "mvp": {
    "coreFeatures": [],
    "deferredFeatures": [],
    "criticalPath": []
  }
}
```

If `.cursor/learning-patterns.json` missing, create with:
```json
{
  "userPreferences": {
    "approvalStyle": "balanced",
    "riskTolerance": "medium", 
    "preferredComplexity": "medium",
    "qualityFocus": ["testing", "eslint"],
    "mvpApproach": "aggressive",
    "confidenceThreshold": 0.6
  },
  "historicalData": {
    "tickets": {},
    "velocityTrends": {
      "averageVelocity": 0,
      "recentTrend": "establishing",
      "estimationAccuracy": 0,
      "actualVsEstimated": {}
    },
    "mvpSuccess": {
      "timeToMvp": 0,
      "featureDeferralRate": 0,
      "qualityMaintained": true,
      "coreFeatureCompletion": 0
    }
  },
  "patterns": {
    "approvalPredictors": {},
    "workflowPreferences": {
      "batchSimilarWork": false,
      "eslintFirstApproach": true,
      "testDrivenDevelopment": false,
      "mvpFirstDevelopment": true,
      "preferredFileOrder": []
    },
    "confidenceScoring": {
      "highConfidencePatterns": [],
      "lowConfidencePatterns": [],
      "thresholdAdjustments": {}
    }
  },
  "insights": {
    "strongSkillAreas": [],
    "improvementAreas": [],
    "preferredWorkingHours": "09:00-17:00",
    "mostProductiveDays": [],
    "mvpPatterns": {
      "successfulDeferrals": [],
      "coreFeaturePatterns": [],
      "qualityTradeoffs": []
    },
    "learningProgress": {
      "totalInteractions": 0,
      "approvalRate": 0,
      "learningAccuracy": 0
    }
  },
  "metadata": {
    "createdAt": "2024-09-24T10:30:00Z",
    "version": "1.0.0",
    "totalTickets": 0,
    "mvpCycles": 0,
    "lastUpdated": "2024-09-24T10:30:00Z"
  }
}
```

## Auto-Setup Flow

**First Run Detection:**
```
‚ùå No project configuration found!
üöÄ Setting up AI-optimized Linear workflow system...

Please provide:
1. Linear team key (e.g., K0D, PROJ): ____
2. Linear team ID (find in Linear settings): ____
3. Main framework (Next.js, React, etc.): ____
4. MVP target date: ____
5. Quality standards (test coverage %): ____

Creating `.cursor/project.json`...
Creating `.cursor/learning-patterns.json`...
‚úÖ Setup complete! Ready for AI-assisted development.
```

## Proactive Monitoring

**On Every Interaction:**
- Check milestone progress vs timeline
- Monitor sprint velocity trends
- Analyze team capacity vs workload
- Track learning system evolution
- Validate project scope using `.cursor/project.json`
- Assess MVP progress and feature classification

**Project-Scoped Operations:**
- All Linear API calls MUST use `project: "{linear.projectId}"` from `.cursor/project.json`
- Validate `linear.teamId` and `linear.projectId` exist before any Linear operations
- Use `linear.projectName` for context in all project-related communications

**Learning-Enhanced Suggestions:**
- "üéØ Pattern: You approve 92% of auth tickets - suggest [TICKET-ID]?"
- "üìä Velocity trending 25 pts/sprint - current at 23, on track"
- "‚ö° Learning: You batch database work - [TICKET-IDS] ready?"
- "üöÄ MVP Progress: 3/5 core features complete, on track for [DATE]"

## MVP-First Development Strategy

**Dynamic MVP Classification:**
- Parse customer documents using multi-engine processing
- Combine AI models for natural language understanding
- Use specialized OCR engines for structured documents
- Automatically classify features as core MVP vs. nice-to-have
- Apply RICE method with automated complexity scoring

**MVP Feature Management:**
- Track core features in `mvp.coreFeatures` array
- Defer nice-to-have features to `mvp.deferredFeatures`
- Maintain critical path in `mvp.criticalPath`
- Update MVP progress based on core feature completion

**5-Step MVP Process Integration:**
1. **Problem Validation** with AI-powered market research
2. **Visual Mockups** using v0.dev integration
3. **Core Feature Definition** with automated complexity scoring
4. **AI-Assisted Build** leveraging Cursor's context optimization
5. **Iterate Based on Feedback** through structured user loops

## Pattern-Based Risk Assessment

Use learning data for intelligent risk detection:
- "‚ö†Ô∏è Similar tickets historically took 2x estimates - buffer recommended"
- "üîç You previously flagged [FEATURE_TYPE] changes as high-risk - extra review?"
- "üí° Past tickets like this needed additional testing - suggest 95% coverage"
- "üö® MVP Risk: Feature complexity may impact [MILESTONE_DATE] deadline"

## Cross-Rule Communication

**Provide to Ticket Manager:**
- Current project context and priorities
- Learned user preferences and patterns
- Historical velocity and estimation data
- Risk tolerance and quality standards
- MVP status and feature classification

**Receive from Ticket Manager:**
- Implementation progress and outcomes
- User approval/rejection patterns
- Actual vs estimated effort data
- Technical challenges and solutions
- MVP feature completion status

## Commands

**Note**: All commands are defined in `.cursor/commands/` folder. This rule focuses on project management logic and Linear integration.

## Learning Data Updates

**Track and Learn:**
- Suggestion acceptance/rejection rates
- User workflow patterns and preferences
- Quality gate effectiveness
- Milestone progression patterns
- Team velocity trends and accuracy
- MVP success patterns and feature classification accuracy

**Adaptive Behavior:**
- Increase proactive suggestions for high-approval topics
- Reduce frequency for commonly rejected suggestions
- Adjust risk assessment based on user tolerance
- Personalize communication style and detail level
- Learn MVP classification patterns and improve accuracy

## Quality Enforcement Integration

**Automated Quality Gates:**
- Integrate with GitHub Actions for quality validation
- Use tools like Qodo Cover and EarlyAI for test generation
- Validate each generated test for quality and coverage impact
- Achieve 85% reduction in test development time

**Git Hooks Integration:**
- Pre-commit validation with test coverage thresholds
- Security scans and AI-generated code pattern validation
- Block commits below 90% coverage
- Automatic cleanup of failed attempt artifacts

**Quality Metrics:**
- 90%+ test coverage across all code
- 85%+ branch coverage
- 95%+ function coverage
- Automated security scanning
- Performance benchmark validation

## Error Handling

**Configuration Issues:**
- Missing files ‚Üí Auto-create with prompts
- Malformed JSON ‚Üí Backup and recreate
- Invalid Linear data ‚Üí Request user correction
- Missing `linear.projectId` ‚Üí Cannot proceed with Linear operations
- Missing `linear.teamId` ‚Üí Cannot proceed with team-specific operations

**API Failures:**
- Linear unavailable ‚Üí Use cached data, warn user
- Network issues ‚Üí Graceful degradation
- Authentication problems ‚Üí Guide user to fix

**MVP Classification Errors:**
- Ambiguous requirements ‚Üí Request clarification
- Feature complexity misassessment ‚Üí Re-evaluate with learning data
- Critical path disruption ‚Üí Alert and suggest alternatives

Keep monitoring lightweight but intelligent - focus on actionable insights that improve with learning and maintain MVP-first development approach.