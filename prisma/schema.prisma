// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - Auth0 compatible
model User {
  id        String   @id @default(cuid())
  auth0Id   String   @unique
  email     String   @unique
  name      String?
  avatar    String?
  role      UserRole @default(ARTIST)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  artistProfile Artist?
  venueProfile  Venue?
  sentMessages  Message[] @relation("MessageSender")
  receivedMessages Message[] @relation("MessageReceiver")
  contracts     Contract[]

  @@map("users")
}

enum UserRole {
  ARTIST
  VENUE
  TECHNICIAN
  ADMIN
}

// Artist profile model
model Artist {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Music profile
  genres      String[]
  instruments String[]
  bio         String?
  experience  String?
  portfolio   String[] // URLs to portfolio items
  
  // Availability and preferences
  available   Boolean  @default(true)
  travelRadius Int?    // in kilometers
  minFee      Float?
  maxFee      Float?
  
  // Location
  latitude    Float?
  longitude   Float?
  city        String?
  country     String?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bookings    Booking[]

  @@map("artists")
}

// Venue profile model
model Venue {
  id          String   @id @default(cuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Venue details
  name        String
  description String?
  capacity    Int?
  venueType   VenueType
  amenities   String[]
  
  // Location
  address     String
  city        String
  country     String
  latitude    Float
  longitude   Float
  postalCode  String?
  
  // Contact and booking
  phone       String?
  email       String?
  website     String?
  bookingContact String?
  
  // Availability
  available   Boolean  @default(true)
  bookingRules String? // JSON string with booking rules
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  bookings    Booking[]

  @@map("venues")
}

enum VenueType {
  CONCERT_HALL
  CLUB
  BAR
  RESTAURANT
  OUTDOOR
  THEATER
  STUDIO
  OTHER
}

// Booking model
model Booking {
  id          String        @id @default(cuid())
  artistId    String
  venueId     String
  status      BookingStatus @default(PENDING)
  
  // Event details
  eventName   String
  eventDate   DateTime
  startTime   DateTime
  endTime     DateTime
  description String?
  
  // Financial
  agreedFee   Float?
  currency    String        @default("USD")
  paymentStatus PaymentStatus @default(PENDING)
  
  // Logistics
  setupTime   Int?          // minutes
  soundcheck  Boolean       @default(false)
  equipment   String[]      // required equipment
  specialRequests String?
  
  // Communication
  notes       String?
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  artist      Artist        @relation(fields: [artistId], references: [id], onDelete: Cascade)
  venue       Venue         @relation(fields: [venueId], references: [id], onDelete: Cascade)
  messages    Message[]
  contracts   Contract[]

  @@map("bookings")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  DISPUTED
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIAL
  REFUNDED
  DISPUTED
}

// Message model for chat system
model Message {
  id        String   @id @default(cuid())
  bookingId String
  senderId  String
  receiverId String
  
  content   String
  messageType MessageType @default(TEXT)
  attachments String[] // URLs to attachments
  
  read      Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  sender    User    @relation("MessageSender", fields: [senderId], references: [id], onDelete: Cascade)
  receiver  User    @relation("MessageReceiver", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("messages")
}

enum MessageType {
  TEXT
  IMAGE
  FILE
  SYSTEM
}

// Contract model
model Contract {
  id          String   @id @default(cuid())
  bookingId   String
  createdById String
  
  // Contract details
  title       String
  content     String   // Contract text content
  fileUrl     String?  // URL to PDF file if generated
  fileData    Bytes?   // Binary data of contract file
  
  // Legal
  terms       String   // JSON string with contract terms
  signatures  String   // JSON string with signature data
  status      ContractStatus @default(DRAFT)
  
  // Dates
  validFrom   DateTime?
  validUntil  DateTime?
  signedAt    DateTime?
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  booking     Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  createdBy   User    @relation(fields: [createdById], references: [id], onDelete: Cascade)

  @@map("contracts")
}

enum ContractStatus {
  DRAFT
  PENDING_SIGNATURE
  SIGNED
  EXPIRED
  CANCELLED
}
